version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend test
          command: |
            cd ./backend
            npm i
            npm run test

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Scan backend dependencies 
          command: |
            cd ./backend
            npm i
            npm audit --audit-level=critical

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend build
          command: |
            cd ./backend
            npm i
            npm run build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Frontend build
          command: |
            cd ./frontend
            npm i
            npm run build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci
            cd files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci
            cd files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  get_instance_ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get the instance ip address for backend 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
      - run:
          name: Store the backend ip address to memstash so that frontend can use it
          command: |
            chmod 777 bkmemstash.sh
            ./bkmemstash.sh
            cat inventory

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --no-cache --upgrade bash
      - run: apk --no-cache add curl
      - run:
          name: Store the backend ip address to memstash so that frontend can use it
          command: |
            chmod 777 extract_ip_address.sh 
            ./extract_ip_address.sh
            cat inventory
      - add_ssh_keys:
          fingerprints: ["f8:53:0a:66:d3:17:cc:bd:70:f9:24:9b:18:9a:fa:72"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install openssh
          command: |
            apk add openssh-client      
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=udapeople-prod.crlxmmeso4wy.us-east-2.rds.amazonaws.com >> "backend/.env"
            echo TYPEORM_PORT=5432 >> "backend/.env"
            echo TYPEORM_USERNAME=postgres >> "backend/.env"
            echo TYPEORM_PASSWORD=udapeople123 >> "backend/.env"
            echo TYPEORM_DATABASE=udapeople-prod >> "backend/.env"
            cd .circleci/ansible/
            ansible-playbook -i ~/project/inventory  main.yml
      - destroy-stack   

#  est-backend:

#  can-frontend:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  test_analyze_build_project:
    jobs:
      - test-backend
      - analyze-backend:
          requires:
            - test-backend
      - build-backend:
          requires:
            - analyze-backend
      - build-frontend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - build-frontend
