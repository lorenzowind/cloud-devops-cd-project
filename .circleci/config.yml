version: 2.1

commands:
  destroy-stack:
    description: "command for reverting and destroying stack"
    parameters:
      to:
        type: string
        default: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      front:
        type: string
        default: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Delete s3 files
          command: |
            sudo apt-get install python3-pip
            pip3 install awscli
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          when: on_fail
      - run:
          name: Delete current stacks
          command: |
            aws cloudformation delete-stack --stack-name  << parameters.to >>
            aws cloudformation delete-stack --stack-name  << parameters.front >>
          when: on_fail
      - run:
          name: Revert last migration
          command: |
            VALUE=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if $VALUE == "true"
            then
            cd ./backend
            echo "Reverting migrations"
            npm run migrations:revert
            else 
            echo "No migration occured"
            fi
          when: on_fail

jobs:
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend test
          command: |
            cd ./backend
            npm i
            npm run test

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Scan backend dependencies 
          command: |
            cd ./backend
            npm i
            npm audit --audit-level=critical

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend build
          command: |
            cd ./backend
            npm i
            npm run build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Frontend build
          command: |
            cd ./frontend
            npm i
            npm run build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci
            cd files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci
            cd files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  store-backend-ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get the instance ip address for backend 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
      - run:
          name: Store the backend ip address to memstash so that frontend can use it
          command: |
            chmod 777 ./.circleci/files/store_backend_ip.sh
            ./.circleci/files/store_backend_ip.sh
            cat inventory

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --no-cache --upgrade bash
      - run: apk --no-cache add curl
      - run:
          name: Extract the backend ip address from memstash so that frontend can use it
          command: |
            chmod 777  ./.circleci/files/extract_backend_ip.sh 
            ./.circleci/files/extract_backend_ip.sh
            cat inventory
      - add_ssh_keys:
          fingerprints: ["f8:53:0a:66:d3:17:cc:bd:70:f9:24:9b:18:9a:fa:72"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install openssh
          command: |
            apk add openssh-client      
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd backend
            touch .env
            echo "NODE_ENV=production" > .env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cd ../.circleci/ansible/
            ansible-playbook -i ~/project/inventory configure_server_playbook.yml
      - destroy-stack

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          cd backend && npm install
      - run: 
          name: Run database migrations 
          no_output_timeout: 10m
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  
            cd backend
            npm i
            npm run migrations > migrations.txt
      - run:
          name: Save result value
          command: |
            cd backend
            if grep "executed successfully" migrations.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - destroy-stack

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run: apk add --no-cache --upgrade bash
      - run:
          name: Store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 extract_ip_address.sh 
            ./extract_ip_address.sh  
      - add_ssh_keys:
          fingerprints: ["f8:53:0a:66:d3:17:cc:bd:70:f9:24:9b:18:9a:fa:72"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Install openssh
          command: |
             apk add openssh-client 
      - run:
          name: Copy files to server
          no_output_timeout: 60m
          command: |
            printenv >> ./backend/.env
            cat ./backend/.env
            cd .circleci/ansible/ 
            ansible-playbook -i ~/project/inventory deploy_backend_playbook.yml
      - destroy-stack

  prepare-distribution-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run: apk add --no-cache --upgrade bash
      - run:
          name: Install awscli
          command: |
            pip3 install awscli
      - run:
          name: Set the api url to environment so that frontend can burn it to the code on compile
          command: |
            chmod 777 set_backend_ip.sh
            source .circleci/files/set_backend_ip.sh
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run: npm install webpack-dev-server -g
      - run: cd frontend && npm install
      - run: cd frontend && npm run build
      - run: aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-stack    

  run-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    environment: 
      ID: arns3
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run:
          name: Set the API_URL to environment so that smoke test can be done to backend
          command: |
            chmod 777 ./.circleci/files/set_backend_ip_env.sh
            source ./.circleci/files/set_backend_ip_env.sh
      - run:
          name: Install awscli
          command: |
            pip3 install awscli 
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.ap-south-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi       
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:project, Values=udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            curl "http://${BACKEND_IP}:3030/api/status"
      - destroy-stack

  update-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update the deployed app to production and cleanup
          command: |
            curl https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o jq
            chmod +x ./jq
            cp jq /usr/bin
            curl -H "content-length: 0" -X POST "https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/${STORE_TOKEN}/workflow_id/${CIRCLE_WORKFLOW_ID:0:7}"
            
            export OldWorkflowId=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/${STORE_TOKEN}/workflow_id | jq -r)
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo "Old workflow Id: ${OldWorkflowId}"  
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople &
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowId}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowId} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowId}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowId}"
            fi

workflows:
  prepare_project:
    jobs:
      - test-backend
      - analyze-backend:
          requires:
            - test-backend
      - build-backend:
          requires:
            - analyze-backend
      - build-frontend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - build-frontend
      - store-backend-ip:
          requires:
            - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - store-backend-ip
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - prepare-distribution-frontend:
          requires:
            - deploy-backend
